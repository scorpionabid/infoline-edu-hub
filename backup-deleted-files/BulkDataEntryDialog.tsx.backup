import React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  Users, \n  Edit3, \n  Loader2, \n  Send, \n  Info, \n  CheckCircle,\n  X,\n  AlertTriangle\n} from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuthStore, selectUser } from '@/hooks/auth/useAuthStore';\nimport { ProxyDataEntryService } from '@/services/dataEntry/proxyDataEntryService';\n\ninterface BulkDataEntryDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  selectedSchools: string[];\n  categoryId: string;\n  columnId?: string; // Əgər column artıq seçilibsə\n  onComplete?: () => void;\n  inline?: boolean; // Inline istifadə üçün\n}\n\n/**\n * Bulk Data Entry Dialog\n * \n * Bu komponent bir kateqoriya və sütun seçib, çoxlu məktəb üçün eyni dəyər daxil etməyə imkan verir.\n * \n * Məsələn:\n * - Kateqoriya: \"Təchizat məlumatları\"  \n * - Sütun: \"Oduna ehtiyac var?\"\n * - Seçilmiş məktəblər: Məktəb A, B, C\n * - Dəyər: \"Xeyr\"\n * \n * Nəticə: A, B, C məktəbləri üçün \"Oduna ehtiyac var?\" sütununa \"Xeyr\" dəyəri daxil edilir.\n */\nexport const BulkDataEntryDialog: React.FC<BulkDataEntryDialogProps> = ({\n  isOpen,\n  onClose,\n  selectedSchools,\n  categoryId,\n  columnId: preSelectedColumnId,\n  onComplete,\n  inline = false\n}) => {\n  const { toast } = useToast();\n  const user = useAuthStore(selectUser);\n  const queryClient = useQueryClient();\n  \n  // State\n  const [selectedColumnId, setSelectedColumnId] = useState<string>(preSelectedColumnId || '');\n  const [bulkValue, setBulkValue] = useState<string>('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submissionResults, setSubmissionResults] = useState<{\n    successful: string[];\n    failed: { schoolId: string; error: string }[];\n  } | null>(null);\n\n  // Get category with ONLY ACTIVE columns\n  const { data: category, isLoading: categoryLoading } = useQuery({\n    queryKey: ['category-with-columns', categoryId],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('categories')\n        .select(`\n          *,\n          columns!inner(\n            id,\n            name,\n            type,\n            is_required,\n            placeholder,\n            help_text,\n            order_index,\n            default_value,\n            options,\n            validation,\n            status\n          )\n        `)\n        .eq('id', categoryId)\n        .eq('columns.status', 'active') // FILTER: Only active columns\n        .single();\n      \n      if (error) throw error;\n      return data;\n    },\n    enabled: !!categoryId && isOpen\n  });\n\n  // Get schools info\n  const { data: schools, isLoading: schoolsLoading } = useQuery({\n    queryKey: ['bulk-schools', selectedSchools],\n    queryFn: async () => {\n      if (selectedSchools.length === 0) return [];\n      \n      const { data, error } = await supabase\n        .from('schools')\n        .select('id, name')\n        .in('id', selectedSchools);\n      \n      if (error) throw error;\n      return data;\n    },\n    enabled: selectedSchools.length > 0 && isOpen\n  });\n\n  // Get selected column info\n  const selectedColumn = category?.columns?.find(col => col.id === selectedColumnId);\n  \n  const columns = category?.columns || [];\n\n  // Handle bulk submission\n  const handleBulkSubmit = async () => {\n    if (!selectedColumnId || !bulkValue.trim()) {\n      toast({\n        title: 'Məlumat çatmır',\n        description: 'Zəhmət olmasa sütun və dəyər seçin',\n        variant: 'destructive'\n      });\n      return;\n    }\n\n    if (selectedSchools.length === 0) {\n      toast({\n        title: 'Məktəb seçilməyib',\n        description: 'Zəhmət olmasa ən azı bir məktəb seçin',\n        variant: 'destructive'\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    setSubmissionResults(null);\n\n    const successful: string[] = [];\n    const failed: { schoolId: string; error: string }[] = [];\n\n    try {\n      // Process each school\n      for (const schoolId of selectedSchools) {\n        try {\n          // Create form data with single column value\n          const formData = { [selectedColumnId]: bulkValue };\n\n          // Save proxy form data\n          const saveResult = await ProxyDataEntryService.saveProxyFormData(formData, {\n            categoryId,\n            schoolId,\n            userId: user!.id,\n            proxyUserId: user!.id,\n            proxyUserRole: user!.role,\n            originalSchoolId: schoolId,\n            proxyReason: `Bulk data entry: ${selectedColumn?.name} = ${bulkValue}`,\n            status: 'draft'\n          });\n\n          if (!saveResult.success) {\n            console.error('Save failed for school:', schoolId, saveResult);\n            throw new Error(saveResult.error || saveResult.message || 'Saxlama xətası');\n          }\n\n          // Submit for auto-approval\n          const submitResult = await ProxyDataEntryService.submitProxyData({\n            categoryId,\n            schoolId,\n            proxyUserId: user!.id,\n            proxyUserRole: user!.role,\n            proxyReason: `Bulk data entry: ${selectedColumn?.name} = ${bulkValue}`,\n            autoApprove: true\n          });\n\n          if (!submitResult.success) {\n            console.error('Submit failed for school:', schoolId, submitResult);\n            throw new Error(submitResult.error || submitResult.message || 'Təsdiq xətası');\n          }\n\n          successful.push(schoolId);\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Naməlum xəta';\n          failed.push({ schoolId, error: errorMessage });\n        }\n      }\n\n      // Set results\n      setSubmissionResults({ successful, failed });\n\n      // Show success toast\n      toast({\n        title: 'Bulk əməliyyat tamamlandı',\n        description: `${successful.length} məktəb uğurlu, ${failed.length} xətə`\n      });\n\n      // Invalidate relevant queries\n      queryClient.invalidateQueries({\n        queryKey: ['proxyDataEntry']\n      });\n\n      // Call completion callback after delay\n      if (onComplete && failed.length === 0) {\n        setTimeout(() => {\n          onComplete();\n          onClose();\n        }, 2000);\n      }\n\n    } catch (error) {\n      toast({\n        title: 'Bulk əməliyyat xətası',\n        description: error instanceof Error ? error.message : 'Naməlum xəta',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Reset state when dialog closes\n  const handleClose = () => {\n    if (!inline) {\n      setSelectedColumnId('');\n      setBulkValue('');\n      setSubmissionResults(null);\n    }\n    onClose();\n  };\n\n  // Render column input based on type\n  const renderColumnInput = () => {\n    if (!selectedColumn) return null;\n\n    switch (selectedColumn.type) {\n      case 'select':\n        return (\n          <Select value={bulkValue} onValueChange={setBulkValue}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Seçin...\" />\n            </SelectTrigger>\n            <SelectContent>\n              {(selectedColumn.options as any[])?.map((option: any, index: number) => (\n                <SelectItem key={index} value={option.value || option}>\n                  {option.label || option}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        );\n      \n      case 'textarea':\n        return (\n          <Textarea\n            value={bulkValue}\n            onChange={(e) => setBulkValue(e.target.value)}\n            placeholder={selectedColumn.placeholder || `${selectedColumn.name} daxil edin`}\n            className=\"min-h-[100px]\"\n          />\n        );\n      \n      default:\n        return (\n          <Input\n            type={\n              selectedColumn.type === 'number' ? 'number' :\n              selectedColumn.type === 'date' ? 'date' :\n              selectedColumn.type === 'email' ? 'email' :\n              'text'\n            }\n            value={bulkValue}\n            onChange={(e) => setBulkValue(e.target.value)}\n            placeholder={selectedColumn.placeholder || `${selectedColumn.name} daxil edin`}\n          />\n        );\n    }\n  };\n\n  // Inline content\n  const content = (\n    <div className=\"space-y-6\">\n      {/* Selected Schools Summary */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-sm flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            Seçilmiş Məktəblər ({selectedSchools.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {schoolsLoading ? (\n            <div className=\"flex items-center gap-2\">\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n              <span className=\"text-sm\">Məktəblər yüklənir...</span>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 max-h-32 overflow-y-auto\">\n              {schools?.map((school) => (\n                <div key={school.id} className=\"flex items-center gap-2 p-2 bg-muted/30 rounded text-sm\">\n                  <span className=\"truncate\">{school.name}</span>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Category Info */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-sm\">Kateqoriya</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {categoryLoading ? (\n            <div className=\"flex items-center gap-2\">\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n              <span className=\"text-sm\">Kateqoriya yüklənir...</span>\n            </div>\n          ) : (\n            <div className=\"flex items-center gap-2\">\n              <span className=\"font-medium\">{category?.name}</span>\n              <Badge variant=\"outline\">\n                {columns.length} sütun\n              </Badge>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Column Selection - Seçilmiş sütun var ise göstərmə */}\n      {!preSelectedColumnId && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm\">Sütun Seçimi</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Hansı sütuna məlumat daxil edəcəksiniz?</label>\n              <Select value={selectedColumnId} onValueChange={setSelectedColumnId}>\n                <SelectTrigger className=\"mt-2\">\n                  <SelectValue placeholder=\"Sütun seçin\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {columns.map((column) => (\n                    <SelectItem key={column.id} value={column.id}>\n                      <div className=\"flex items-center gap-2\">\n                        <span>{column.name}</span>\n                        {column.is_required && (\n                          <Badge variant=\"destructive\" className=\"text-xs\">\n                            Məcburi\n                          </Badge>\n                        )}\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {column.type}\n                        </Badge>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {selectedColumn && (\n              <div>\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  Dəyər\n                  {selectedColumn.is_required && <span className=\"text-red-500\">*</span>}\n                </label>\n                <div className=\"mt-2\">\n                  {renderColumnInput()}\n                </div>\n                {selectedColumn.help_text && (\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {selectedColumn.help_text}\n                  </p>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n      \n      {/* Pre-selected Column Info */}\n      {preSelectedColumnId && selectedColumn && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm\">Seçilmiş Sütun</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center gap-2 p-3 bg-primary/5 rounded-lg\">\n              <span className=\"font-medium\">{selectedColumn.name}</span>\n              {selectedColumn.is_required && (\n                <Badge variant=\"destructive\" className=\"text-xs\">\n                  Məcburi\n                </Badge>\n              )}\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {selectedColumn.type}\n              </Badge>\n            </div>\n            \n            <div>\n              <label className=\"text-sm font-medium flex items-center gap-2\">\n                Dəyər\n                {selectedColumn.is_required && <span className=\"text-red-500\">*</span>}\n              </label>\n              <div className=\"mt-2\">\n                {renderColumnInput()}\n              </div>\n              {selectedColumn.help_text && (\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  {selectedColumn.help_text}\n                </p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Preview */}\n      {selectedColumn && bulkValue && (\n        <Alert>\n          <Info className=\"h-4 w-4\" />\n          <AlertDescription>\n            <div className=\"space-y-2\">\n              <p className=\"font-medium\">Önizləmə:</p>\n              <p className=\"text-sm\">\n                <strong>{selectedSchools.length}</strong> məktəb üçün{' '}\n                <strong>\"{selectedColumn.name}\"</strong> sütununa{' '}\n                <strong>\"{bulkValue}\"</strong> dəyəri daxil ediləcək.\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                Bu əməliyyat geri alına bilməz. Təsdiq etmədən əvvəl yoxlayın.\n              </p>\n            </div>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Submission Results */}\n      {submissionResults && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center gap-2\">\n              {submissionResults.failed.length === 0 ? (\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              ) : (\n                <AlertTriangle className=\"h-4 w-4 text-amber-600\" />\n              )}\n              Nəticələr\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Success */}\n            {submissionResults.successful.length > 0 && (\n              <div>\n                <div className=\"flex items-center gap-2 text-green-600 text-sm font-medium\">\n                  <CheckCircle className=\"h-4 w-4\" />\n                  Uğurlu ({submissionResults.successful.length})\n                </div>\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  Məlumatlar avtomatik təsdiq edildi və bildirişlər göndərildi\n                </div>\n              </div>\n            )}\n\n            {/* Failures */}\n            {submissionResults.failed.length > 0 && (\n              <div>\n                <div className=\"flex items-center gap-2 text-red-600 text-sm font-medium\">\n                  <X className=\"h-4 w-4\" />\n                  Xətələr ({submissionResults.failed.length})\n                </div>\n                <div className=\"space-y-1 mt-2 max-h-32 overflow-y-auto\">\n                  {submissionResults.failed.map(({ schoolId, error }) => {\n                    const school = schools?.find(s => s.id === schoolId);\n                    return (\n                      <div key={schoolId} className=\"text-xs text-red-600 p-2 bg-red-50 rounded\">\n                        <span className=\"font-medium\">{school?.name || schoolId}:</span> {error}\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n\n            {/* Progress */}\n            <div>\n              <div className=\"flex justify-between text-xs text-muted-foreground mb-1\">\n                <span>Tamamlanma</span>\n                <span>\n                  {submissionResults.successful.length}/{selectedSchools.length}\n                </span>\n              </div>\n              <Progress \n                value={(submissionResults.successful.length / selectedSchools.length) * 100} \n                className=\"h-2\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Action Buttons - Inline mode üçün */}\n      {inline && (\n        <div className=\"flex justify-end gap-2 pt-4 border-t\">\n          <Button\n            variant=\"outline\"\n            onClick={handleClose}\n            disabled={isSubmitting}\n          >\n            {submissionResults ? 'Bitir' : 'Ləğv et'}\n          </Button>\n          \n          {!submissionResults && (\n            <Button\n              onClick={handleBulkSubmit}\n              disabled={\n                isSubmitting || \n                !selectedColumnId || \n                !bulkValue.trim() || \n                selectedSchools.length === 0\n              }\n            >\n              {isSubmitting ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                  Göndərilir...\n                </>\n              ) : (\n                <>\n                  <Send className=\"h-4 w-4 mr-2\" />\n                  Toplu Göndər ({selectedSchools.length} məktəb)\n                </>\n              )}\n            </Button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n\n  // Render inline or as dialog\n  if (inline) {\n    console.log('BulkDataEntryDialog: Rendering inline mode', {\n      selectedSchools: selectedSchools.length,\n      categoryId,\n      columnId: preSelectedColumnId,\n      selectedColumnId\n    });\n    \n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n            <Users className=\"h-5 w-5\" />\n            Toplu Məlumat Daxil Etmə\n          </h3>\n        </div>\n        <p className=\"text-sm text-muted-foreground\">\n          Seçilmiş məktəblər üçün eyni məlumatı toplu şəkildə daxil edin\n        </p>\n        <div className=\"text-xs text-muted-foreground bg-yellow-50 p-2 rounded\">\n          Debug Info: \n          - Category: {categoryId}\n          - PreSelected Column: {preSelectedColumnId || 'None'}\n          - Current Column: {selectedColumnId || 'None'}\n          - Schools: {selectedSchools.length}\n          - Category Loading: {categoryLoading.toString()}\n          - Schools Loading: {schoolsLoading.toString()}\n        </div>\n        {content}\n      </div>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5\" />\n            Toplu Məlumat Daxil Etmə\n          </DialogTitle>\n          <DialogDescription>\n            Seçilmiş məktəblər üçün eyni məlumatı toplu şəkildə daxil edin\n          </DialogDescription>\n        </DialogHeader>\n        {content}\n        <DialogFooter>\n          <Button\n            variant=\"outline\"\n            onClick={handleClose}\n            disabled={isSubmitting}\n          >\n            {submissionResults ? 'Bağla' : 'Ləğv et'}\n          </Button>\n          \n          {!submissionResults && (\n            <Button\n              onClick={handleBulkSubmit}\n              disabled={\n                isSubmitting || \n                !selectedColumnId || \n                !bulkValue.trim() || \n                selectedSchools.length === 0\n              }\n            >\n              {isSubmitting ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                  Göndərilir...\n                </>\n              ) : (\n                <>\n                  <Send className=\"h-4 w-4 mr-2\" />\n                  Toplu Göndər ({selectedSchools.length} məktəb)\n                </>\n              )}\n            </Button>\n          )}\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default BulkDataEntryDialog;