import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\"\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2'\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n}\n\ninterface DeletionAnalysisRequest {\n  columnId: string;\n}\n\ninterface DeletionImpact {\n  dataEntriesCount: number;\n  sectorDataCount: number;\n  affectedSchools: Array<{ id: string; name: string; region: string }>;\n  affectedSectors: Array<{ id: string; name: string; region: string }>;\n  lastUpdated: string;\n  canRestore: boolean;\n  estimatedSize: string;\n  relatedCategories: Array<{ id: string; name: string }>;\n}\n\nserve(async (req) => {\n  // Handle CORS preflight requests\n  if (req.method === 'OPTIONS') {\n    return new Response('ok', { headers: corsHeaders })\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_ANON_KEY') ?? '',\n      {\n        global: {\n          headers: { Authorization: req.headers.get('Authorization')! },\n        },\n      }\n    )\n\n    // Verify user authentication and permissions\n    const {\n      data: { user },\n      error: authError,\n    } = await supabaseClient.auth.getUser()\n\n    if (authError || !user) {\n      return new Response(\n        JSON.stringify({ error: 'Unauthorized' }),\n        { \n          status: 401, \n          headers: { ...corsHeaders, 'Content-Type': 'application/json' } \n        }\n      )\n    }\n\n    // Check if user has permission to delete columns\n    const { data: userRole } = await supabaseClient\n      .from('user_roles')\n      .select('role, region_id')\n      .eq('user_id', user.id)\n      .single()\n\n    if (!userRole || !['superadmin', 'regionadmin'].includes(userRole.role)) {\n      return new Response(\n        JSON.stringify({ error: 'Insufficient permissions' }),\n        { \n          status: 403, \n          headers: { ...corsHeaders, 'Content-Type': 'application/json' } \n        }\n      )\n    }\n\n    const { columnId }: DeletionAnalysisRequest = await req.json()\n\n    if (!columnId) {\n      return new Response(\n        JSON.stringify({ error: 'Column ID is required' }),\n        { \n          status: 400, \n          headers: { ...corsHeaders, 'Content-Type': 'application/json' } \n        }\n      )\n    }\n\n    // Get column details\n    const { data: column, error: columnError } = await supabaseClient\n      .from('columns')\n      .select(`\n        id, name, type, category_id,\n        categories (id, name, assignment)\n      `)\n      .eq('id', columnId)\n      .single()\n\n    if (columnError || !column) {\n      return new Response(\n        JSON.stringify({ error: 'Column not found' }),\n        { \n          status: 404, \n          headers: { ...corsHeaders, 'Content-Type': 'application/json' } \n        }\n      )\n    }\n\n    // Analyze data entries impact\n    const { data: dataEntries, error: dataError } = await supabaseClient\n      .from('data_entries')\n      .select(`\n        id, school_id, status, created_at, updated_at,\n        schools (id, name, region_id, regions(name))\n      `)\n      .eq('column_id', columnId)\n\n    if (dataError) {\n      console.error('Error fetching data entries:', dataError)\n    }\n\n    // Analyze sector data entries impact  \n    const { data: sectorEntries, error: sectorError } = await supabaseClient\n      .from('sector_data_entries')\n      .select(`\n        id, sector_id, status, created_at, updated_at,\n        sectors (id, name, region_id, regions(name))\n      `)\n      .eq('column_id', columnId)\n\n    if (sectorError) {\n      console.error('Error fetching sector entries:', sectorError)\n    }\n\n    // Process affected schools\n    const affectedSchoolsMap = new Map()\n    dataEntries?.forEach(entry => {\n      if (entry.schools) {\n        affectedSchoolsMap.set(entry.schools.id, {\n          id: entry.schools.id,\n          name: entry.schools.name,\n          region: entry.schools.regions?.name || 'Unknown'\n        })\n      }\n    })\n\n    // Process affected sectors\n    const affectedSectorsMap = new Map()\n    sectorEntries?.forEach(entry => {\n      if (entry.sectors) {\n        affectedSectorsMap.set(entry.sectors.id, {\n          id: entry.sectors.id,\n          name: entry.sectors.name,\n          region: entry.sectors.regions?.name || 'Unknown'\n        })\n      }\n    })\n\n    // Calculate estimated data size\n    const totalRecords = (dataEntries?.length || 0) + (sectorEntries?.length || 0)\n    const estimatedSize = totalRecords < 100 ? 'Kiçik' : \n                         totalRecords < 1000 ? 'Orta' : 'Böyük'\n\n    // Find latest update\n    const allDates = [\n      ...(dataEntries?.map(e => e.updated_at) || []),\n      ...(sectorEntries?.map(e => e.updated_at) || [])\n    ]\n    const lastUpdated = allDates.length > 0 ? \n      new Date(Math.max(...allDates.map(d => new Date(d).getTime()))).toISOString() :\n      new Date().toISOString()\n\n    const impact: DeletionImpact = {\n      dataEntriesCount: dataEntries?.length || 0,\n      sectorDataCount: sectorEntries?.length || 0,\n      affectedSchools: Array.from(affectedSchoolsMap.values()),\n      affectedSectors: Array.from(affectedSectorsMap.values()),\n      lastUpdated,\n      canRestore: true,\n      estimatedSize,\n      relatedCategories: column.categories ? [{\n        id: column.categories.id,\n        name: column.categories.name\n      }] : []\n    }\n\n    // Log the analysis for audit purposes\n    await supabaseClient\n      .from('audit_logs')\n      .insert({\n        user_id: user.id,\n        action: 'ANALYZE_COLUMN_DELETION',\n        entity_type: 'columns',\n        entity_id: columnId,\n        old_value: { \n          column_name: column.name,\n          impact_summary: {\n            data_entries: impact.dataEntriesCount,\n            sector_entries: impact.sectorDataCount,\n            affected_schools: impact.affectedSchools.length,\n            affected_sectors: impact.affectedSectors.length\n          }\n        },\n        new_value: null\n      })\n\n    return new Response(\n      JSON.stringify({ \n        success: true, \n        impact,\n        column: {\n          id: column.id,\n          name: column.name,\n          type: column.type,\n          category_name: column.categories?.name\n        }\n      }),\n      { \n        headers: { ...corsHeaders, 'Content-Type': 'application/json' } \n      }\n    )\n\n  } catch (error) {\n    console.error('Error in analyze-column-deletion function:', error)\n    return new Response(\n      JSON.stringify({ \n        error: 'Internal server error',\n        details: error.message \n      }),\n      { \n        status: 500, \n        headers: { ...corsHeaders, 'Content-Type': 'application/json' } \n      }\n    )\n  }\n})