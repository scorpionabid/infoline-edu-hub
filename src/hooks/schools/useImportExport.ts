import { useState, useCallback } from 'react';
import { toast } from 'sonner';
import { useLanguage } from '@/context/LanguageContext';
import { School } from '@/types/school';
import { exportSchoolDataToExcel, generateExcelTemplate, mapRegionNameToId, mapSectorNameToId } from '@/utils/excelUtils';

interface UseImportExportResult {
  importSchools: (file: File, regions: any[], sectors: any[]) => Promise<void>;
  exportTemplate: () => void;
}

export const useImportExport = (): UseImportExportResult => {
  const { t } = useLanguage();

  const importSchools = useCallback(async (file: File, regions: any[], sectors: any[]) => {
    const reader = new FileReader();

    reader.onload = async (e: any) => {
      try {
        const workbook = await import('xlsx').then(xlsx => xlsx.read(e.target.result, { type: 'binary' }));
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const data = import('xlsx').then(xlsx => xlsx.utils.sheet_to_json(worksheet));
        
        if (!data) {
          toast.error(t('invalidFileContent') || 'Faylın məzmunu düzgün deyil.');
          return;
        }

        const importedSchools: School[] = [];

        (await data).forEach((item: any) => {
          const regionName = item['Region'] || item['Region Name'];
          const sectorName = item['Sector'] || item['Sector Name'];

          const regionId = mapRegionNameToId(regionName, regions);
          const sectorId = mapSectorNameToId(sectorName, sectors);

          if (!regionId || !sectorId) {
            toast.error(t('regionOrSectorNotFound') || 'Region və ya Sektor tapılmadı.');
            return;
          }

          const school: School = {
            id: '', // ID is generated by Supabase
            name: item['School Name'],
            region_id: regionId,
            sector_id: sectorId,
            principal_name: item['Principal'] || '',
            address: item['Address'] || '',
            phone: item['Phone'] || '',
            email: item['Email'] || '',
            status: item['Status'] || 'active',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
            student_count: item['Student Count'] || 0,
            teacher_count: item['Teacher Count'] || 0,
          };

          importedSchools.push(school);
        });

        // Handle the imported schools (e.g., save to database)
        console.log('Imported Schools:', importedSchools);
        toast.success(t('schoolsImportedSuccessfully') || 'Məktəblər uğurla idxal edildi!');

      } catch (error) {
        console.error('Import error:', error);
        toast.error(t('importError') || 'İdxal zamanı xəta baş verdi.');
      }
    };

    reader.onerror = () => {
      toast.error(t('fileReadError') || 'Fayl oxuma xətası.');
    };

    reader.readAsBinaryString(file);
  }, [t]);

  const exportTemplate = useCallback(() => {
    generateExcelTemplate();
    toast.success(t('templateDownloaded') || 'Şablon yükləndi.');
  }, [t]);

  return {
    importSchools,
    exportTemplate,
  };
};
