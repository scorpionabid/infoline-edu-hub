import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  RefreshCw, \n  Database, \n  TrendingUp, \n  Clock, \n  Trash2,\n  BarChart3 \n} from 'lucide-react';\nimport { reportCache, CacheStats } from '@/services/reports/cacheService';\nimport { useReportsData } from '@/hooks/reports/useReportsData';\nimport { toast } from 'sonner';\n\nexport interface CacheStatsDisplayProps {\n  className?: string;\n  compact?: boolean;\n}\n\nconst CacheStatsDisplay: React.FC<CacheStatsDisplayProps> = ({ \n  className = '', \n  compact = false \n}) => {\n  const [stats, setStats] = useState<CacheStats>({ hits: 0, misses: 0, size: 0, hitRate: 0 });\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const { clearCache, getCacheStats } = useReportsData();\n\n  // Update stats periodically\n  useEffect(() => {\n    const updateStats = () => {\n      const currentStats = getCacheStats();\n      setStats(currentStats);\n    };\n\n    updateStats(); // Initial load\n    const interval = setInterval(updateStats, 5000); // Update every 5 seconds\n\n    return () => clearInterval(interval);\n  }, [getCacheStats]);\n\n  const handleClearCache = () => {\n    try {\n      clearCache();\n      setStats({ hits: 0, misses: 0, size: 0, hitRate: 0 });\n      toast.success('Cache təmizləndi');\n    } catch (error) {\n      toast.error('Cache təmizləməkdə xəta');\n    }\n  };\n\n  const handleRefreshStats = () => {\n    setIsRefreshing(true);\n    setTimeout(() => {\n      const currentStats = getCacheStats();\n      setStats(currentStats);\n      setIsRefreshing(false);\n      toast.success('Statistikalar yeniləndi');\n    }, 500);\n  };\n\n  const getHitRateColor = (hitRate: number) => {\n    if (hitRate >= 80) return 'text-green-600 bg-green-100';\n    if (hitRate >= 60) return 'text-yellow-600 bg-yellow-100';\n    if (hitRate >= 40) return 'text-orange-600 bg-orange-100';\n    return 'text-red-600 bg-red-100';\n  };\n\n  const getHitRateStatus = (hitRate: number) => {\n    if (hitRate >= 80) return 'Excellent';\n    if (hitRate >= 60) return 'Good';\n    if (hitRate >= 40) return 'Fair';\n    return 'Poor';\n  };\n\n  if (compact) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Database className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm font-medium\">Cache</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Badge className={getHitRateColor(stats.hitRate)}>\n                {stats.hitRate.toFixed(1)}%\n              </Badge>\n              <span className=\"text-xs text-muted-foreground\">\n                {stats.size} items\n              </span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleRefreshStats}\n                disabled={isRefreshing}\n                className=\"h-6 w-6 p-0\"\n              >\n                <RefreshCw className={`h-3 w-3 ${isRefreshing ? 'animate-spin' : ''}`} />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader className=\"flex flex-row items-center justify-between pb-4\">\n        <CardTitle className=\"text-lg font-semibold flex items-center\">\n          <Database className=\"h-5 w-5 mr-2\" />\n          Cache Performance\n        </CardTitle>\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleRefreshStats}\n            disabled={isRefreshing}\n          >\n            <RefreshCw className={`h-4 w-4 mr-1 ${isRefreshing ? 'animate-spin' : ''}`} />\n            Yenilə\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleClearCache}\n          >\n            <Trash2 className=\"h-4 w-4 mr-1\" />\n            Təmizlə\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Cache Hit Rate */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground mr-1\" />\n              <span className=\"text-sm font-medium\">Hit Rate</span>\n            </div>\n            <div className={`text-2xl font-bold px-2 py-1 rounded-md ${getHitRateColor(stats.hitRate)}`}>\n              {stats.hitRate.toFixed(1)}%\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-1\">\n              {getHitRateStatus(stats.hitRate)}\n            </div>\n          </div>\n\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <BarChart3 className=\"h-4 w-4 text-muted-foreground mr-1\" />\n              <span className=\"text-sm font-medium\">Cache Hits</span>\n            </div>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {stats.hits.toLocaleString()}\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-1\">\n              Uğurlu istəklər\n            </div>\n          </div>\n\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <Database className=\"h-4 w-4 text-muted-foreground mr-1\" />\n              <span className=\"text-sm font-medium\">Cache Misses</span>\n            </div>\n            <div className=\"text-2xl font-bold text-orange-600\">\n              {stats.misses.toLocaleString()}\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-1\">\n              DB istəkləri\n            </div>\n          </div>\n\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <Clock className=\"h-4 w-4 text-muted-foreground mr-1\" />\n              <span className=\"text-sm font-medium\">Cache Size</span>\n            </div>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {stats.size}\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-1\">\n              Saxlanmış items\n            </div>\n          </div>\n        </div>\n\n        {/* Performance Indicator */}\n        <div className=\"bg-muted/50 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium\">Performance Impact</span>\n            <Badge variant={stats.hitRate >= 60 ? 'default' : 'destructive'}>\n              {stats.hitRate >= 60 ? 'Optimized' : 'Needs Attention'}\n            </Badge>\n          </div>\n          <div className=\"text-xs text-muted-foreground\">\n            {stats.hitRate >= 80 && 'Excellent cache performance! Most requests are served from cache.'}\n            {stats.hitRate >= 60 && stats.hitRate < 80 && 'Good cache performance. Consider optimizing cache TTL.'}\n            {stats.hitRate >= 40 && stats.hitRate < 60 && 'Fair cache performance. Review cache strategy.'}\n            {stats.hitRate < 40 && 'Poor cache performance. Cache may need tuning or clearing.'}\n          </div>\n          \n          {/* Cache Keys Info */}\n          <div className=\"mt-3 pt-3 border-t border-border\">\n            <div className=\"flex items-center justify-between text-xs\">\n              <span>Total Requests:</span>\n              <span className=\"font-medium\">{(stats.hits + stats.misses).toLocaleString()}</span>\n            </div>\n            <div className=\"flex items-center justify-between text-xs mt-1\">\n              <span>Cache Efficiency:</span>\n              <span className=\"font-medium\">\n                {stats.hits + stats.misses > 0 \n                  ? `${((stats.hits / (stats.hits + stats.misses)) * 100).toFixed(1)}%`\n                  : '0%'\n                }\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between text-xs mt-1\">\n              <span>Memory Usage:</span>\n              <span className=\"font-medium\">\n                {stats.size > 0 ? `${Math.round(stats.size * 0.1)}KB` : '0KB'}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-2 gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={() => {\n              // Force a cache warmup\n              toast.info('Cache warmup başladılır...');\n              // This would trigger preload in a real scenario\n            }}\n            className=\"text-xs\"\n          >\n            <TrendingUp className=\"h-3 w-3 mr-1\" />\n            Warmup Cache\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={() => {\n              const keys = reportCache.getKeys();\n              console.log('Cache keys:', keys);\n              toast.info(`${keys.length} cache keys logged to console`);\n            }}\n            className=\"text-xs\"\n          >\n            <Database className=\"h-3 w-3 mr-1\" />\n            Debug Keys\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default CacheStatsDisplay;\n