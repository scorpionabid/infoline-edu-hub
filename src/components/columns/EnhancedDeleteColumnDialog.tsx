import React, { useState, useEffect } from 'react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useLanguage } from '@/context/LanguageContext';\nimport { Loader2, AlertTriangle, Database, School, Building, Calendar } from 'lucide-react';\nimport { supabase } from '@/lib/supabase';\n\ninterface DeletionImpact {\n  dataEntriesCount: number;\n  sectorDataCount: number;\n  affectedSchools: Array<{ id: string; name: string }>;\n  affectedSectors: Array<{ id: string; name: string }>;\n  lastUpdated: string;\n  canRestore: boolean;\n}\n\ninterface EnhancedDeleteColumnDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: (options: { hardDelete: boolean; exportData: boolean }) => Promise<void>;\n  column: {\n    id: string;\n    name: string;\n    type: string;\n    category_name?: string;\n  };\n  isSubmitting?: boolean;\n}\n\nconst EnhancedDeleteColumnDialog: React.FC<EnhancedDeleteColumnDialogProps> = ({ \n  isOpen, \n  onClose, \n  onConfirm, \n  column,\n  isSubmitting = false\n}) => {\n  const { t } = useLanguage();\n  const [confirmationText, setConfirmationText] = useState('');\n  const [impact, setImpact] = useState<DeletionImpact | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [hardDelete, setHardDelete] = useState(false);\n  const [exportData, setExportData] = useState(false);\n  const [agreedToTerms, setAgreedToTerms] = useState(false);\n\n  const expectedConfirmation = `DELETE ${column.name}`;\n  const isConfirmationValid = confirmationText === expectedConfirmation;\n  const canProceed = isConfirmationValid && agreedToTerms;\n\n  // Load deletion impact analysis\n  useEffect(() => {\n    if (isOpen && column.id) {\n      loadDeletionImpact();\n    }\n  }, [isOpen, column.id]);\n\n  const loadDeletionImpact = async () => {\n    try {\n      setLoading(true);\n      \n      // Call enhanced delete analysis edge function\n      const { data, error } = await supabase.functions.invoke('analyze-column-deletion', {\n        body: { columnId: column.id }\n      });\n\n      if (error) throw error;\n      setImpact(data.impact);\n    } catch (error) {\n      console.error('Error loading deletion impact:', error);\n      // Fallback to basic query\n      await loadBasicImpact();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadBasicImpact = async () => {\n    try {\n      // Basic impact analysis using direct queries\n      const [dataEntriesResult, sectorDataResult] = await Promise.all([\n        supabase\n          .from('data_entries')\n          .select('id, school_id')\n          .eq('column_id', column.id),\n        supabase\n          .from('sector_data_entries')\n          .select('id, sector_id')\n          .eq('column_id', column.id)\n      ]);\n\n      const dataEntriesCount = dataEntriesResult.data?.length || 0;\n      const sectorDataCount = sectorDataResult.data?.length || 0;\n\n      setImpact({\n        dataEntriesCount,\n        sectorDataCount,\n        affectedSchools: [],\n        affectedSectors: [],\n        lastUpdated: new Date().toISOString(),\n        canRestore: true\n      });\n    } catch (error) {\n      console.error('Error in basic impact analysis:', error);\n    }\n  };\n\n  const handleConfirm = async () => {\n    if (!canProceed) return;\n    \n    await onConfirm({ hardDelete, exportData });\n  };\n\n  const resetDialog = () => {\n    setConfirmationText('');\n    setHardDelete(false);\n    setExportData(false);\n    setAgreedToTerms(false);\n    setImpact(null);\n  };\n\n  const handleClose = () => {\n    resetDialog();\n    onClose();\n  };\n\n  return (\n    <AlertDialog open={isOpen} onOpenChange={handleClose}>\n      <AlertDialogContent className=\"max-w-2xl\">\n        <AlertDialogHeader>\n          <AlertDialogTitle className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-5 w-5 text-destructive\" />\n            {t(\"deleteColumn\")} - {column.name}\n          </AlertDialogTitle>\n          <AlertDialogDescription className=\"text-base\">\n            Bu əməliyyat sütunu və bununla əlaqəli bütün məlumatları siləcək.\n            <span className=\"font-semibold text-destructive block mt-1\">\n              Bu əməliyyat geri qaytarıla bilməz!\n            </span>\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Impact Analysis */}\n          {loading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <Loader2 className=\"h-8 w-8 animate-spin\" />\n              <span className=\"ml-2\">Təsir analizi aparılır...</span>\n            </div>\n          ) : impact ? (\n            <Alert className=\"border-yellow-200 bg-yellow-50\">\n              <Database className=\"h-4 w-4\" />\n              <AlertDescription>\n                <div className=\"space-y-2\">\n                  <div className=\"font-semibold\">Silinəcək məlumatlar:</div>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <School className=\"h-4 w-4\" />\n                      <span>Məktəb məlumatları: <strong>{impact.dataEntriesCount}</strong></span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Building className=\"h-4 w-4\" />\n                      <span>Sektor məlumatları: <strong>{impact.sectorDataCount}</strong></span>\n                    </div>\n                  </div>\n                  {(impact.dataEntriesCount > 0 || impact.sectorDataCount > 0) && (\n                    <div className=\"text-sm text-orange-700 mt-2\">\n                      ⚠️ Bu sütuna aid <strong>{impact.dataEntriesCount + impact.sectorDataCount}</strong> məlumat silinəcək\n                    </div>\n                  )}\n                </div>\n              </AlertDescription>\n            </Alert>\n          ) : null}\n\n          {/* Column Info */}\n          <div className=\"bg-gray-50 p-3 rounded-lg\">\n            <div className=\"text-sm space-y-1\">\n              <div><strong>Sütun adı:</strong> {column.name}</div>\n              <div><strong>Tipi:</strong> {column.type}</div>\n              {column.category_name && <div><strong>Kateqoriya:</strong> {column.category_name}</div>}\n            </div>\n          </div>\n\n          {/* Data Export Option */}\n          {impact && (impact.dataEntriesCount > 0 || impact.sectorDataCount > 0) && (\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox \n                  id=\"export-data\" \n                  checked={exportData}\n                  onCheckedChange={setExportData}\n                />\n                <Label htmlFor=\"export-data\">\n                  Silinmədən əvvəl məlumatları Excel faylı olaraq ixrac et\n                </Label>\n              </div>\n            </div>\n          )}\n\n          {/* Hard Delete Option - Only for SuperAdmin */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox \n                id=\"hard-delete\" \n                checked={hardDelete}\n                onCheckedChange={setHardDelete}\n              />\n              <Label htmlFor=\"hard-delete\" className=\"text-sm\">\n                Tam silinmə (bərpa edilə bilməz) - <span className=\"text-destructive\">Təkcə SuperAdmin üçün</span>\n              </Label>\n            </div>\n            {hardDelete && (\n              <Alert variant=\"destructive\">\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Tam silinmə seçildikdə məlumatlar verilənlər bazasından tamamilə silinəcək və heç vaxt bərpa edilə bilməyəcək.\n                </AlertDescription>\n              </Alert>\n            )}\n          </div>\n\n          {/* Confirmation Input */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"confirmation\">\n              Təsdiq üçün <code className=\"bg-gray-100 px-1 rounded\">{expectedConfirmation}</code> yazın:\n            </Label>\n            <Input\n              id=\"confirmation\"\n              value={confirmationText}\n              onChange={(e) => setConfirmationText(e.target.value)}\n              placeholder={expectedConfirmation}\n              className={confirmationText && !isConfirmationValid ? 'border-destructive' : ''}\n            />\n          </div>\n\n          {/* Terms Agreement */}\n          <div className=\"flex items-start space-x-2\">\n            <Checkbox \n              id=\"agree-terms\" \n              checked={agreedToTerms}\n              onCheckedChange={setAgreedToTerms}\n            />\n            <Label htmlFor=\"agree-terms\" className=\"text-sm leading-5\">\n              Bu əməliyyatın nəticələrini anlayıram və məsuliyyəti qəbul edirəm.\n              Silinmiş məlumatların bərpası mümkün olmaya bilər.\n            </Label>\n          </div>\n        </div>\n\n        <AlertDialogFooter>\n          <AlertDialogCancel onClick={handleClose}>\n            {t(\"cancel\")}\n          </AlertDialogCancel>\n          <AlertDialogAction \n            onClick={handleConfirm}\n            disabled={!canProceed || isSubmitting}\n            className=\"bg-destructive hover:bg-destructive/90\"\n          >\n            {isSubmitting ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Silinir...\n              </>\n            ) : (\n              <>\n                <AlertTriangle className=\"mr-2 h-4 w-4\" />\n                Sütunu sil\n              </>\n            )}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n};\n\nexport default EnhancedDeleteColumnDialog;