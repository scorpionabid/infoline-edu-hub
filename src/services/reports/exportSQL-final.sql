-- İnfoLine Export Functions SQL Script - Conflict Free Version\n-- Bu faylı Supabase SQL Editor-də icra edin\n\n-- Əvvəlcə mövcud funksiyaları siləcəyik\nDROP FUNCTION IF EXISTS get_school_column_export_data;\nDROP FUNCTION IF EXISTS get_regional_comparison_report;\nDROP FUNCTION IF EXISTS get_category_completion_report;\n\n-- 1. get_school_column_export_data function\nCREATE OR REPLACE FUNCTION get_school_column_export_data(\n  p_category_id uuid DEFAULT NULL,\n  p_region_id uuid DEFAULT NULL,\n  p_sector_id uuid DEFAULT NULL\n)\nRETURNS json AS $$\nDECLARE\n  result json;\nBEGIN\n  WITH school_data AS (\n    SELECT \n      s.id as school_id,\n      s.name as school_name,\n      s.principal_name,\n      r.name as region_name,\n      sec.name as sector_name,\n      COALESCE(s.completion_rate, 0) as completion_rate,\n      COALESCE(entry_stats.total_entries, 0) as total_entries,\n      COALESCE(entry_stats.approved_entries, 0) as approved_entries,\n      COALESCE(entry_stats.pending_entries, 0) as pending_entries,\n      COALESCE(entry_stats.rejected_entries, 0) as rejected_entries,\n      CASE \n        WHEN COALESCE(entry_stats.total_entries, 0) > 0 \n        THEN ROUND((COALESCE(entry_stats.approved_entries, 0)::numeric / entry_stats.total_entries::numeric) * 100)\n        ELSE 0 \n      END as approval_rate,\n      entry_stats.last_submission,\n      CASE \n        WHEN COALESCE(s.completion_rate, 0) >= 80 THEN 'high_performance'\n        WHEN COALESCE(s.completion_rate, 0) >= 50 THEN 'medium_performance'\n        ELSE 'low_performance'\n      END as performance_status\n    FROM schools s\n    JOIN regions r ON s.region_id = r.id\n    JOIN sectors sec ON s.sector_id = sec.id\n    LEFT JOIN LATERAL (\n      SELECT \n        COUNT(*) as total_entries,\n        COUNT(*) FILTER (WHERE status = 'approved') as approved_entries,\n        COUNT(*) FILTER (WHERE status = 'pending') as pending_entries,\n        COUNT(*) FILTER (WHERE status = 'rejected') as rejected_entries,\n        MAX(created_at) as last_submission\n      FROM data_entries de \n      WHERE de.school_id = s.id\n        AND (p_category_id IS NULL OR de.category_id = p_category_id)\n    ) entry_stats ON true\n    WHERE \n      (s.status = 'active' OR s.status IS NULL)\n      AND (p_region_id IS NULL OR s.region_id = p_region_id)\n      AND (p_sector_id IS NULL OR s.sector_id = p_sector_id)\n  )\n  SELECT json_agg(to_json(sd)) INTO result\n  FROM school_data sd;\n  \n  RETURN COALESCE(result, '[]'::json);\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- 2. Enhanced get_regional_comparison_report function\nCREATE OR REPLACE FUNCTION get_regional_comparison_report(\n  p_date_from date DEFAULT NULL,\n  p_date_to date DEFAULT NULL\n)\nRETURNS json AS $$\nBEGIN\n  RETURN (\n    SELECT json_agg(\n      json_build_object(\n        'region_id', r.id,\n        'region_name', r.name,\n        'total_schools', COALESCE(region_stats.total_schools, 0),\n        'total_sectors', COALESCE(region_stats.total_sectors, 0),\n        'avg_completion_rate', COALESCE(region_stats.avg_completion_rate, 0),\n        'total_data_entries', COALESCE(region_stats.total_data_entries, 0),\n        'approved_entries', COALESCE(region_stats.approved_entries, 0),\n        'pending_entries', COALESCE(region_stats.pending_entries, 0),\n        'rejected_entries', COALESCE(region_stats.rejected_entries, 0),\n        'approved_percentage', CASE \n          WHEN COALESCE(region_stats.total_data_entries, 0) > 0 \n          THEN ROUND((COALESCE(region_stats.approved_entries, 0)::numeric / region_stats.total_data_entries::numeric) * 100)\n          ELSE 0 \n        END,\n        'performance_score', CASE \n          WHEN COALESCE(region_stats.avg_completion_rate, 0) >= 80 THEN 'Excellent'\n          WHEN COALESCE(region_stats.avg_completion_rate, 0) >= 60 THEN 'Good'\n          WHEN COALESCE(region_stats.avg_completion_rate, 0) >= 40 THEN 'Average'\n          ELSE 'Needs Improvement'\n        END,\n        'last_updated', NOW()\n      )\n    )\n    FROM regions r\n    LEFT JOIN LATERAL (\n      SELECT \n        COUNT(DISTINCT s.id) as total_schools,\n        COUNT(DISTINCT s.sector_id) as total_sectors,\n        ROUND(AVG(COALESCE(s.completion_rate, 0))) as avg_completion_rate,\n        COUNT(de.id) as total_data_entries,\n        COUNT(de.id) FILTER (WHERE de.status = 'approved') as approved_entries,\n        COUNT(de.id) FILTER (WHERE de.status = 'pending') as pending_entries,\n        COUNT(de.id) FILTER (WHERE de.status = 'rejected') as rejected_entries\n      FROM schools s\n      LEFT JOIN data_entries de ON de.school_id = s.id\n      WHERE s.region_id = r.id \n        AND (s.status = 'active' OR s.status IS NULL)\n        AND (p_date_from IS NULL OR de.created_at >= p_date_from)\n        AND (p_date_to IS NULL OR de.created_at <= p_date_to)\n    ) region_stats ON true\n    WHERE (r.status = 'active' OR r.status IS NULL)\n    ORDER BY region_stats.avg_completion_rate DESC NULLS LAST\n  );\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- 3. Enhanced get_category_completion_report function\nCREATE OR REPLACE FUNCTION get_category_completion_report(\n  p_category_id uuid,\n  p_region_id uuid DEFAULT NULL,\n  p_sector_id uuid DEFAULT NULL\n)\nRETURNS json AS $$\nBEGIN\n  RETURN (\n    SELECT json_agg(\n      json_build_object(\n        'school_id', s.id,\n        'school_name', s.name,\n        'principal_name', s.principal_name,\n        'region_name', r.name,\n        'sector_name', sec.name,\n        'category_id', cat.id,\n        'category_name', cat.name,\n        'required_columns', COALESCE(cat_stats.required_columns, 0),\n        'filled_columns', COALESCE(school_stats.filled_columns, 0),\n        'completion_percentage', CASE \n          WHEN COALESCE(cat_stats.required_columns, 0) > 0 \n          THEN ROUND((COALESCE(school_stats.filled_columns, 0)::numeric / cat_stats.required_columns::numeric) * 100)\n          ELSE 0 \n        END,\n        'approved_columns', COALESCE(school_stats.approved_columns, 0),\n        'pending_columns', COALESCE(school_stats.pending_columns, 0),\n        'rejected_columns', COALESCE(school_stats.rejected_columns, 0),\n        'status', CASE \n          WHEN COALESCE(school_stats.filled_columns, 0) = COALESCE(cat_stats.required_columns, 0) \n            AND COALESCE(school_stats.approved_columns, 0) = COALESCE(cat_stats.required_columns, 0) \n            AND COALESCE(cat_stats.required_columns, 0) > 0 THEN 'completed'\n          WHEN COALESCE(school_stats.filled_columns, 0) > 0 THEN 'in_progress'\n          ELSE 'not_started'\n        END,\n        'last_submission', school_stats.last_submission\n      )\n    )\n    FROM schools s\n    JOIN regions r ON s.region_id = r.id\n    JOIN sectors sec ON s.sector_id = sec.id\n    JOIN categories cat ON cat.id = p_category_id\n    LEFT JOIN LATERAL (\n      SELECT COUNT(*) as required_columns\n      FROM columns c \n      WHERE c.category_id = p_category_id \n        AND (c.status = 'active' OR c.status IS NULL)\n        AND (c.is_required = true OR c.is_required IS NULL)\n    ) cat_stats ON true\n    LEFT JOIN LATERAL (\n      SELECT \n        COUNT(DISTINCT de.column_id) as filled_columns,\n        COUNT(DISTINCT de.column_id) FILTER (WHERE de.status = 'approved') as approved_columns,\n        COUNT(DISTINCT de.column_id) FILTER (WHERE de.status = 'pending') as pending_columns,\n        COUNT(DISTINCT de.column_id) FILTER (WHERE de.status = 'rejected') as rejected_columns,\n        MAX(de.created_at) as last_submission\n      FROM data_entries de \n      JOIN columns c ON de.column_id = c.id\n      WHERE de.school_id = s.id \n        AND c.category_id = p_category_id\n    ) school_stats ON true\n    WHERE (s.status = 'active' OR s.status IS NULL)\n      AND (p_region_id IS NULL OR s.region_id = p_region_id)\n      AND (p_sector_id IS NULL OR s.sector_id = p_sector_id)\n    ORDER BY COALESCE(s.completion_rate, 0) DESC, s.name\n  );\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Permissions\nGRANT EXECUTE ON FUNCTION get_school_column_export_data TO authenticated;\nGRANT EXECUTE ON FUNCTION get_regional_comparison_report TO authenticated;\nGRANT EXECUTE ON FUNCTION get_category_completion_report TO authenticated;\n\n-- Comments\nCOMMENT ON FUNCTION get_school_column_export_data IS 'Export məktəb sütun məlumatları - rol əsaslı giriş ilə';\nCOMMENT ON FUNCTION get_regional_comparison_report IS 'Regional müqayisə hesabatı export üçün';\nCOMMENT ON FUNCTION get_category_completion_report IS 'Kateqoriya tamamlanma hesabatı export üçün';\n