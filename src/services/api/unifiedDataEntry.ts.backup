// Mock API for unified data entries
export interface UnifiedDataEntry {
  id?: string;
  category_id: string;
  column_id?: string;
  value: any;
  status: 'draft' | 'pending' | 'approved' | 'rejected';
  entity_id?: string;
  entity_type?: 'school' | 'sector';
  created_at?: string;
  updated_at?: string;
}

interface FetchUnifiedDataEntriesParams {
  categoryId: string;
  entityId: string;
  entityType: 'school' | 'sector';
}

// Mock fetch function
export const fetchUnifiedDataEntries = async ({
  categoryId,
  entityId,
  entityType
}: FetchUnifiedDataEntriesParams): Promise<UnifiedDataEntry[]> => {
  console.log('fetchUnifiedDataEntries called with:', { categoryId, entityId, entityType });
  
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 300));
  
  // Return mock data
  return [
    {
      id: '1',
      category_id: categoryId,
      column_id: '1',
      value: 'Mock data 1',
      status: 'draft',
      entity_id: entityId,
      entity_type: entityType,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    },
    {
      id: '2',
      category_id: categoryId,
      column_id: '2',
      value: 'Mock data 2',
      status: 'draft',
      entity_id: entityId,
      entity_type: entityType,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }
  ];
};

// Mock save function
export const saveUnifiedDataEntries = async (
  entries: Partial<UnifiedDataEntry>[],
  categoryId: string,
  entityId: string,
  entityType: 'school' | 'sector',
  userId?: string | null
): Promise<UnifiedDataEntry[]> => {
  console.log('saveUnifiedDataEntries called with:', { entries, categoryId, entityId, entityType, userId });
  
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 500));
  
  // Return saved entries with IDs
  return entries.map((entry, index) => ({
    id: `saved-${index}`,
    category_id: categoryId,
    column_id: entry.column_id || '',
    value: entry.value,
    status: entry.status || 'draft',
    entity_id: entityId,
    entity_type: entityType,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  }));
};

export default {
  fetchUnifiedDataEntries,
  saveUnifiedDataEntries
};
