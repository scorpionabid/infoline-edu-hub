
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { vi } from 'vitest';
import LoginForm from '@/components/auth/LoginForm';
import * as AuthContext from '@/context/auth';
import * as LanguageContext from '@/context/LanguageContext';

// LanguageSelector mock
vi.mock('@/components/LanguageSelector', () => ({
  default: () => <div data-testid="language-selector">Language Selector</div>
}));

// Mock translations
const mockTranslations = {
  loginTitle: 'Daxil ol',
  loginButton: 'Daxil ol',
  loginDescription: 'Hesabƒ±nƒ±za daxil olun',
  email: 'E-po√ßt',
  password: '≈ûifr…ô',
  emailRequired: 'E-po√ßt t…ôl…ôb olunur',
  passwordRequired: '≈ûifr…ô t…ôl…ôb olunur',
  invalidEmail: 'D√ºzg√ºn e-po√ßt daxil edin',
  passwordTooShort: '≈ûifr…ô …ôn azƒ± 6 simvol olmalƒ±dƒ±r',
  forgotPassword: '≈ûifr…ôni unutmusunuz?',
  loggingIn: 'Daxil olunur...',
  loginSuccess: 'Uƒüurla daxil oldunuz',
  invalidCredentials: 'Yanlƒ±≈ü e-po√ßt v…ô ya ≈üifr…ô',
  unexpectedError: 'G√∂zl…ônilm…ôz x…ôta ba≈ü verdi',
};

// Mock language context
const mockLanguageContext = () => {
  vi.spyOn(LanguageContext, 'useLanguage').mockReturnValue({
    t: (key) => mockTranslations[key] || key,
    setLanguage: vi.fn(),
    languages: {
      az: { nativeName: 'Az…ôrbaycan', flag: 'üá¶üáø' },
      en: { nativeName: 'English', flag: 'üá¨üáß' },
      tr: { nativeName: 'T√ºrk√ße', flag: 'üáπüá∑' },
      ru: { nativeName: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' }
    },
    currentLanguage: 'az'
  });
};

// Mock react-router-dom
vi.mock('react-router-dom', () => ({
  useNavigate: () => vi.fn(),
}));

// Helper to mock useAuth - x…ôtalarƒ± aradan qaldƒ±rmaq √º√ß√ºn b√ºt√ºn AuthContextType funksiyalarƒ± …ôlav…ô edildi
function mockUseAuth(loginImpl = vi.fn().mockResolvedValue(true)) {
  vi.spyOn(AuthContext, 'useAuth').mockReturnValue({
    login: loginImpl,
    logout: vi.fn(),
    signOut: vi.fn(),
    updateUser: vi.fn(),
    clearError: vi.fn(),
    resetPassword: vi.fn(),
    updatePassword: vi.fn(),
    refreshUser: vi.fn(),
    user: null,
    isAuthenticated: false,
    isLoading: false,
    error: null
  });
}

describe('LoginForm Component', () => {
  beforeEach(() => {
    vi.resetAllMocks();
    mockLanguageContext();
  });

  it('formu d√ºzg√ºn g√∂st…ôrir v…ô m…ôcburi sah…ôl…ôri yoxlayƒ±r', async () => {
    const loginMock = vi.fn().mockResolvedValue(true);
    mockUseAuth(loginMock);
    const clearErrorMock = vi.fn();
    
    render(<LoginForm error={null} clearError={clearErrorMock} />);
    
    // Form elementl…ôrini yoxlayƒ±n
    expect(screen.getByLabelText(/E-po√ßt/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/≈ûifr…ô/i)).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /Daxil ol/i })).toBeInTheDocument();
    
    // Bo≈ü formla t…ôqdim etm…ôyi yoxlayaq - validasiya x…ôtalarƒ± olmalƒ±dƒ±r
    fireEvent.click(screen.getByRole('button', { name: /Daxil ol/i }));
    
    // M…ôcburi sah…ô x…ôtalarƒ± g√∂st…ôrilm…ôlidir
    await waitFor(() => {
      expect(screen.getByText(mockTranslations.emailRequired)).toBeInTheDocument();
      expect(screen.getByText(mockTranslations.passwordRequired)).toBeInTheDocument();
    });
    
    // Login funksiyasƒ± √ßaƒüƒ±rƒ±lmalƒ±dƒ±r
    expect(loginMock).not.toHaveBeenCalled();
  });

  it('doƒüru m…ôlumatlarla login olunur', async () => {
    const loginMock = vi.fn().mockResolvedValue(true);
    mockUseAuth(loginMock);
    const clearErrorMock = vi.fn();
    
    render(<LoginForm error={null} clearError={clearErrorMock} />);
    
    // Input-larƒ± doldurun
    fireEvent.change(screen.getByLabelText(/E-po√ßt/i), {
      target: { value: 'test@example.com' }
    });
    
    fireEvent.change(screen.getByLabelText(/≈ûifr…ô/i), {
      target: { value: 'password123' }
    });
    
    // Login d√ºym…ôsin…ô klikl…ôyin
    fireEvent.click(screen.getByRole('button', { name: /Daxil ol/i }));
    
    // Login funksiyasƒ±nƒ±n √ßaƒüƒ±rƒ±ldƒ±ƒüƒ±nƒ± yoxlayƒ±n
    await waitFor(() => {
      expect(loginMock).toHaveBeenCalledWith('test@example.com', 'password123');
    });
  });

  it('≈üifr…ôni g√∂st…ôr/gizl…ôt funksiyasƒ± i≈ül…ôyir', () => {
    mockUseAuth();
    
    render(<LoginForm error={null} clearError={vi.fn()} />);
    
    // ∆èvv…ôlc…ô ≈üifr…ô gizlidir
    const passwordInput = screen.getByLabelText(/≈ûifr…ô/i);
    expect(passwordInput).toHaveAttribute('type', 'password');
    
    // G√∂st…ôr d√ºym…ôsin…ô klikl…ôyin
    // Qeyd: querySelector il…ô d√ºym…ôni se√ßirik √ß√ºnki aria-label yoxdur
    const toggleButton = document.querySelector('button.absolute.inset-y-0.right-0');
    expect(toggleButton).not.toBeNull();
    
    if (toggleButton) {
      fireEvent.click(toggleButton);
      
      // ƒ∞ndi ≈üifr…ô g√∂r√ºnm…ôlidir
      expect(passwordInput).toHaveAttribute('type', 'text');
      
      // Yenid…ôn gizl…ôtm…ôk √º√ß√ºn d√ºym…ôy…ô klikl…ôyin
      fireEvent.click(toggleButton);
      
      // ≈ûifr…ô yenid…ôn gizli olmalƒ±dƒ±r
      expect(passwordInput).toHaveAttribute('type', 'password');
    }
  });

  it('login zamanƒ± x…ôta g√∂st…ôrilir', () => {
    mockUseAuth();
    const testError = "Test x…ôta mesajƒ±";
    
    render(<LoginForm error={testError} clearError={vi.fn()} />);
    
    // X…ôta mesajƒ± g√∂st…ôrilm…ôlidir
    expect(screen.getByText(testError)).toBeInTheDocument();
  });

  it('login zamanƒ± y√ºkl…ônm…ô g√∂st…ôrilir', async () => {
    // Login funksiyasƒ± gec cavab ver…ôc…ôk
    const loginMock = vi.fn().mockImplementation(() => {
      return new Promise(resolve => {
        setTimeout(() => resolve(true), 100);
      });
    });
    
    mockUseAuth(loginMock);
    
    render(<LoginForm error={null} clearError={vi.fn()} />);
    
    // Input-larƒ± doldurun
    fireEvent.change(screen.getByLabelText(/E-po√ßt/i), {
      target: { value: 'test@example.com' }
    });
    
    fireEvent.change(screen.getByLabelText(/≈ûifr…ô/i), {
      target: { value: 'password123' }
    });
    
    // Form-u t…ôqdim edin
    fireEvent.submit(screen.getByRole('button', { name: /Daxil ol/i }));
    
    // D√ºym…ôni axtarƒ±n v…ô disabled olub-olmadƒ±ƒüƒ±nƒ± yoxlayƒ±n
    await waitFor(() => {
      const button = screen.getByRole('button', { name: /Daxil ol/i });
      expect(button).toHaveAttribute('disabled');
      
      // Daha d√ºzg√ºn yana≈üma: spinner'i axtarƒ±rƒ±q
      const spinner = document.querySelector('.animate-spin');
      expect(spinner).toBeInTheDocument();
    });
  });
});
